/**
 * Type guard which determines if a component implements the GlOnResize interface.
 */
export function implementsGlOnResize(obj) {
    return typeof obj === 'object' && typeof obj.glOnResize === 'function';
}
/**
 * Type guard which determines if a component implements the GlOnShow interface.
 */
export function implementsGlOnShow(obj) {
    return typeof obj === 'object' && typeof obj.glOnShow === 'function';
}
/**
 * Type guard which determines if a component implements the GlOnHide interface.
 */
export function implementsGlOnHide(obj) {
    return typeof obj === 'object' && typeof obj.glOnHide === 'function';
}
/**
 * Type guard which determines if a component implements the GlOnTab interface.
 */
export function implementsGlOnTab(obj) {
    return typeof obj === 'object' && typeof obj.glOnTab === 'function';
}
/**
 * Type guard which determines if a component implements the GlOnClose interface.
 */
export function implementsGlOnClose(obj) {
    return typeof obj === 'object' && typeof obj.glOnClose === 'function';
}
export function implementsGlOnPopin(obj) {
    return typeof obj === 'object' && typeof obj.glOnPopin === 'function';
}
export function implementsGlOnUnload(obj) {
    return typeof obj === 'object' && typeof obj.glOnUnload === 'function';
}
export function implementsGlOnPopout(obj) {
    return typeof obj === 'object' && typeof obj.glOnPopout === 'function';
}
export function implementsGlHeaderItem(obj) {
    return typeof obj === 'object' && typeof obj.headerComponent === 'function';
}
export const uuid = () => {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1ndWFyZHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbmd4LWdvbGRlbi1sYXlvdXQvc3JjLyIsInNvdXJjZXMiOlsibGliL3R5cGUtZ3VhcmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOztHQUVHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEdBQVE7SUFDM0MsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQztBQUN6RSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBUTtJQUN6QyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDO0FBQ3ZFLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxHQUFRO0lBQ3pDLE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLFFBQVEsS0FBSyxVQUFVLENBQUM7QUFDdkUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEdBQVE7SUFDeEMsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsT0FBTyxLQUFLLFVBQVUsQ0FBQztBQUN0RSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsR0FBUTtJQUMxQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDO0FBQ3hFLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsR0FBUTtJQUMxQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDO0FBQ3hFLENBQUM7QUFDRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsR0FBUTtJQUMzQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDO0FBQ3pFLENBQUM7QUFDRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsR0FBUTtJQUMzQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDO0FBQ3pFLENBQUM7QUFDRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsR0FBUTtJQUM3QyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxlQUFlLEtBQUssVUFBVSxDQUFDO0FBQzlFLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLE9BQU8sc0NBQXNDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ25FLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNuRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHbE9uUmVzaXplLCBHbE9uU2hvdywgR2xPbkhpZGUsIEdsT25UYWIsIEdsT25DbG9zZSwgR2xPblBvcGluLCBHbE9uVW5sb2FkLCBHbE9uUG9wb3V0LCBHbEhlYWRlckl0ZW0gfSBmcm9tIFwiLi9ob29rc1wiO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZ3VhcmQgd2hpY2ggZGV0ZXJtaW5lcyBpZiBhIGNvbXBvbmVudCBpbXBsZW1lbnRzIHRoZSBHbE9uUmVzaXplIGludGVyZmFjZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbXBsZW1lbnRzR2xPblJlc2l6ZShvYmo6IGFueSk6IG9iaiBpcyBHbE9uUmVzaXplIHtcclxuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5nbE9uUmVzaXplID09PSAnZnVuY3Rpb24nO1xyXG59XHJcblxyXG4vKipcclxuICogVHlwZSBndWFyZCB3aGljaCBkZXRlcm1pbmVzIGlmIGEgY29tcG9uZW50IGltcGxlbWVudHMgdGhlIEdsT25TaG93IGludGVyZmFjZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbXBsZW1lbnRzR2xPblNob3cob2JqOiBhbnkpOiBvYmogaXMgR2xPblNob3cge1xyXG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmdsT25TaG93ID09PSAnZnVuY3Rpb24nO1xyXG59XHJcblxyXG4vKipcclxuICogVHlwZSBndWFyZCB3aGljaCBkZXRlcm1pbmVzIGlmIGEgY29tcG9uZW50IGltcGxlbWVudHMgdGhlIEdsT25IaWRlIGludGVyZmFjZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbXBsZW1lbnRzR2xPbkhpZGUob2JqOiBhbnkpOiBvYmogaXMgR2xPbkhpZGUge1xyXG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmdsT25IaWRlID09PSAnZnVuY3Rpb24nO1xyXG59XHJcblxyXG4vKipcclxuICogVHlwZSBndWFyZCB3aGljaCBkZXRlcm1pbmVzIGlmIGEgY29tcG9uZW50IGltcGxlbWVudHMgdGhlIEdsT25UYWIgaW50ZXJmYWNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGltcGxlbWVudHNHbE9uVGFiKG9iajogYW55KTogb2JqIGlzIEdsT25UYWIge1xyXG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmdsT25UYWIgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGd1YXJkIHdoaWNoIGRldGVybWluZXMgaWYgYSBjb21wb25lbnQgaW1wbGVtZW50cyB0aGUgR2xPbkNsb3NlIGludGVyZmFjZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbXBsZW1lbnRzR2xPbkNsb3NlKG9iajogYW55KTogb2JqIGlzIEdsT25DbG9zZSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmouZ2xPbkNsb3NlID09PSAnZnVuY3Rpb24nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW1wbGVtZW50c0dsT25Qb3BpbihvYmo6IGFueSk6IG9iaiBpcyBHbE9uUG9waW4ge1xyXG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmdsT25Qb3BpbiA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaW1wbGVtZW50c0dsT25VbmxvYWQob2JqOiBhbnkpOiBvYmogaXMgR2xPblVubG9hZCB7XHJcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmouZ2xPblVubG9hZCA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaW1wbGVtZW50c0dsT25Qb3BvdXQob2JqOiBhbnkpOiBvYmogaXMgR2xPblBvcG91dCB7XHJcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmouZ2xPblBvcG91dCA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaW1wbGVtZW50c0dsSGVhZGVySXRlbShvYmo6IGFueSk6IG9iaiBpcyBHbEhlYWRlckl0ZW0ge1xyXG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmhlYWRlckNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHV1aWQgPSAoKSA9PiB7XHJcbiAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgKGMpID0+IHtcclxuICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCwgdiA9IGMgPT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcclxuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICB9KTtcclxufVxyXG4iXX0=