{"version":3,"file":"golden-layout.component.d.ts","sources":["golden-layout.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentFactoryResolver, ViewContainerRef, OnInit, OnDestroy, NgZone, Injector, EventEmitter, ComponentRef } from '@angular/core';\r\nimport * as GoldenLayout from 'golden-layout';\r\nimport { ComponentRegistryService } from './component-registry.service';\r\nimport { RootWindowService } from './root-window.service';\r\nimport { Observable } from 'rxjs';\r\nimport { WindowSynchronizerService } from './window-sync.service';\r\nimport { IExtendedGoldenLayoutConfig } from './config';\r\nexport declare const GetComponentFromLayoutManager: (lm: GoldenLayout, id: string) => GoldenLayout.ContentItem;\r\nexport declare class GoldenLayoutComponent implements OnInit, OnDestroy {\r\n    private rootService;\r\n    private componentRegistry;\r\n    private viewContainer;\r\n    private componentFactoryResolver;\r\n    private ngZone;\r\n    private readonly injector;\r\n    private windowSync;\r\n    private parentGoldenLayout;\r\n    private readonly fallbackComponent;\r\n    layout: Observable<IExtendedGoldenLayoutConfig>;\r\n    stateChanged: EventEmitter<never>;\r\n    tabActivated: EventEmitter<GoldenLayout.ContentItem>;\r\n    private el;\r\n    private goldenLayout;\r\n    private onUnloaded;\r\n    private stateChangePaused;\r\n    private stateChangeScheduled;\r\n    private tabsList;\r\n    pushStateChange: () => void;\r\n    resumeStateChange: () => boolean;\r\n    pauseStateChange: () => boolean;\r\n    pushTabActivated: (ci: GoldenLayout.ContentItem) => void;\r\n    private fallbackType;\r\n    private layoutSubscription;\r\n    private openedComponents;\r\n    private poppedIn;\r\n    private _eventEmitter;\r\n    onResize(): void;\r\n    constructor(rootService: RootWindowService, componentRegistry: ComponentRegistryService, viewContainer: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver, ngZone: NgZone, injector: Injector, windowSync: WindowSynchronizerService, parentGoldenLayout: GoldenLayoutComponent, fallbackComponent: any);\r\n    ngOnInit(): void;\r\n    beforeUnload(): void;\r\n    pageHide(): void;\r\n    ngOnDestroy(): void;\r\n    getGoldenLayoutInstance(): GoldenLayout;\r\n    addEvent(kind: string, callback: Function, context?: any): void;\r\n    getSerializableState(): any;\r\n    getComponents(): {\r\n        [id: string]: GoldenLayout.ContentItem;\r\n    };\r\n    closeComponent(component: string): void;\r\n    focusComponent(component: string): void;\r\n    createNewComponent(config: GoldenLayout.ComponentConfig, componentToDock?: string): Promise<ComponentRef<any>>;\r\n    private findStack;\r\n    private destroyGoldenLayout;\r\n    private initializeGoldenLayout;\r\n    /**\r\n     * Build a 'virtual' constructor which is used to pass the components to goldenLayout\r\n     * @param componentType\r\n     */\r\n    private buildConstructor;\r\n    /**\r\n     * Creates an injector capable of injecting the GoldenLayout object,\r\n     * component container, and initial component state.\r\n     */\r\n    private _createComponentInjector;\r\n    /**\r\n     * Registers an event handler for each implemented hook.\r\n     * @param container Golden Layout component container.\r\n     * @param component Angular component instance.\r\n     */\r\n    private _bindEventHooks;\r\n}\r\n"]}